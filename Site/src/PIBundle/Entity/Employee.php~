<?php

namespace PIBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use PIBundle\Entity\Role;
use Doctrine\Common\Collections\ArrayCollection;
/**
 * Employee
 *
 * @ORM\Table(name="employee")
 * @ORM\Entity(repositoryClass="PIBundle\Repository\EmployeeRepository")
 */

class Employee
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
   * @var ArrayCollection
   *
   * @ORM\ManyToMany(targetEntity="PIBundle\Entity\Role")
   * @ORM\JoinTable(name="employees_roles",
   *    joinColumns={@ORM\JoinColumn(name="employee_id", referencedColumnName="id")},
   *    inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")}
   * )
   */
  protected $roles;

  /**
   * @var string
   *
   * @ORM\Column(type="string", length=255, nullable=true)
   */
  protected $salary;

  /**
   * Constructor.
   */
  public function __construct() {
    parent::__construct();
    $this->roles = new ArrayCollection();
  }

  /**
   * Get roles as array of strings.
   *
   * @return array
   */
  public function getRoles() {
    $roleNames = [];
    foreach ($this->roles as $role) {
      $roleNames[] = $role->getName();
    }
    return $roleNames;
  }

  /**
   * Get roles ass ArrayCollection.
   *
   * @return ArrayCollection
   */
  public function getRolesCollection() {
    return $this->roles;
  }

  /**
   * Returns TRUE if employee has ROLE_ADMIN.
   *
   * @return bool
   */
  public function isAdmin() {
    return in_array('ROLE_ADMIN', $this->getRoles(), TRUE);
  }

  /**
   * Set roles.
   *
   * @param ArrayCollection $roles
   * @return Employee
   */
  public function setRolesCollection($roles) {
    $this->roles = $roles;
    return $this;
  }

  /**
   * Add roles
   *
   * @param Role $roles
   * @return Employee
   */
  public function addRolesCollection(Role $roles) {
    $this->roles[] = $roles;

    return $this;
  }

  /**
   * Remove roles
   *
   * @param Role $roles
   */
  public function removeRolesCollection(Role $roles) {
    $this->roles->removeElement($roles);
  }

  /**
   * Set salary
   *
   * @param string $salary
   * @return Employee
   */
  public function setSalary($salary) {
    $this->salary = $salary;

    return $this;
  }

  /**
   * Get salary
   *
   * @return string
   */
  public function getSalary() {
    return $this->salary;
  }

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
}

